makeTree item depth =
    if depth > 0 then
        depth = depth - 1;
        left = makeTree (item * 2 - 1) depth;
        right = makeTree (item * 2) depth;
        { item, get left () = Some left, get right () = Some right }
    else
        { item, get left () = None (), get right () = None () }
    fi;

maybeNode = maybe 0 (.item);
check {item, left, right} = item + maybeNode left - maybeNode right;
out s depth check = println "\(s) of depth \(depth)\t check: \(check)";

checkDepth depth item =
    check (makeTree item depth) + check (makeTree (-item) depth);

minDepth = 4;
n = if empty? _argv then 2 else number _argv[0] fi;
maxDepth = max (minDepth + 2) n;

out "stretch tree" (maxDepth + 1) (check (makeTree 0 (maxDepth + 1)));
longLived = makeTree 0 maxDepth;
var depth = minDepth;
depth <= maxDepth loop
   (iterations = 1 shl (maxDepth - depth + minDepth);
    out "\(iterations * 2)\t trees" depth
        (fold (_ v i = v + checkDepth depth i) 0 [1 .. iterations]);
    depth := depth + 2);
out "long lived tree" maxDepth (check longLived);

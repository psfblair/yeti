/*
 * Simple JSON library for Yeti.
 *
 * Copyright (c) 2013-2015 Madis Janson
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Simple library for parsing and constructing JSON.
 *
 * Examples:
 * Parsing can be done using `jsonParse` function:
 * : load yeti.json;
 * : js = jsonParse '{"foo":[1,2,3],"bar":{"nope":true},"baz":null}';
 * 
 * The parsed value can be accessed with various `js`-prefixed functions
 * in the module, for example:
 * : for (js |> jsGet 'foo' |> jsList) println;
 *
 * Which would print the numbers 1, 2, 3 on separate lines.
 *
 * The JSON string can be formatted using `string` function, or any
 * library function that does this implicitly, for example the following
 * println statements are equivalent:
 * : println (string js);
 * : println js;
 */
module yeti.json;

import yeti.lang: Core, Hash;

typedef opaque json = ~Object;
typedef json_variant =
    String string |
    Number number |
    Boolean boolean |
    Object hash<string, json> |
    List list<json> |
    Null ()

/**
 * Retrieves string from JSON value. If the value is not a string,
 * then the result of applying the default function to the value is returned.
 *
 * Arguments:
 * default - function to apply, if the value is not a string.
 * value - JSON value (expected to be string)
 */
jsStr default value is (~Object -> string) -> ~Object -> string =
    if value instanceof String then
        value unsafely_as string
    else
        default value
    fi;

/**
 * Retrieves number from JSON value. If the value is not a number,
 * then the result of applying the default function to the value is returned.
 *
 * Arguments:
 * default - function to apply, if the value is not a number.
 * value - JSON value (expected to be number)
 */
jsNum default value is (~Object -> number) -> ~Object -> number =
    if value instanceof yeti.lang.Num then
        value unsafely_as number
    else
        default value
    fi;

/**
 * Retrieves boolean from JSON value. If the value is not a boolean,
 * then `undef_bool` is returned (which acts as false, when used in condition,
 * but can be detected using `defined?` function).
 *
 * Arguments:
 * default - function to apply, if the value is not a number.
 * value - JSON value (expected to be boolean)
 */
jsTrue? value is ~Object -> boolean =
    if value instanceof Boolean then
        value unsafely_as boolean
    else
        undef_bool
    fi;

/**
 * Retrieves list from JSON value. If the value is not a list, then
 * empty list `[]` is returned. Application of `defined?` function
 * to the returned list returns false, if the JSON value wasn't a list.
 *
 * Arguments:
 * value - JSON value (expected to be a string)
 */
jsList value is ~Object -> list<json> =
    if value instanceof yeti.lang.AList then
        /* jsList gives list, because with arrays this would be possible:
         * push (jsGet "not-a-field" value) (jsOfStr 'foo');
         * Typo in the field name would result in silent failure.
         * Therefore immutable list type is returned.
         */
        value unsafely_as list<json>
    else
        []
    fi;

/**
 * Retrieves a field value from the JSON value. The `jsNull` value is returned,
 * if the value isn't a JSON object, or the field doesn't exists in the object.
 *
 * Arguments:
 * field - field name
 * value - JSON value (expected to be an object)
 */
jsGet field value is string -> ~Object -> ~Object =
    if value instanceof JSONObj then
        (value unsafely_as ~JSONObj)#map#get(field)
    fi;

/**
 * Retrieves list of field names from JSON value. Empty list is returned,
 * if the value isn't a JSON object.
 *
 * Arguments:
 * value - JSON value (expected to be an object)
 */
jsKeys value is ~Object -> list<string> =
    if value instanceof JSONObj then
        keys = (value unsafely_as ~JSONObj)#map#keySet();
        new yeti.lang.MList(keys#toArray()) unsafely_as list<string>
    else
        []
    fi;

/**
 * Retrieves variant representation of the JSON value.
 *
 * Arguments:
 * value - JSON value
 */
jsValue value is ~Object -> 'a =
    if value instanceof String then
        String (value unsafely_as string)
    elif value instanceof yeti.lang.Num then
        Number (value unsafely_as number)
    elif value instanceof Boolean then
        Boolean (value unsafely_as boolean)
    elif value instanceof JSONObj then
        Object ((value unsafely_as ~JSONObj)#map
                       unsafely_as hash<string, ~Object>)
    elif value instanceof yeti.lang.MList then
        List (value unsafely_as list<~Object>)
    else
        Null ()
    fi;

jsOf = (as ~Object);

jsOfList v is list?<json> -> ~Object =
    if nullptr? v then
        array [] as ~Object
    else
        v as ~Object
    fi;

jsOfObj v is hash<string, json> -> ~Object =
    new JSONObj(v unsafely_as ~Hash);

/**
 * Parses a string into JSON value.
 *
 * Arguments:
 * string - a string to parse
 * 
 * Notes:
 * The reverse operation of formatting JSON value into string can be
 * achieved simply by appling the `string` function from standard
 * library to a JSON value.
 */
jsonParse str is string -> ~Object =
   (invalid = failWith . ("Invalid JSON: " ^);
    var tokens = matchAll ('\s++|([{:,}\[\]]|"(?:[^\\"]|\\["\\/bfnrtu])*+"|' ^
                         '-?\d++(?:\.\d++)?(?:[eE][+-]?\d++)?|null|true|false)')
                          (`at` 1) invalid str;
    fetch () is () -> ~Object =
        case tokens of
        s :: rest:
            tokens := rest;
            case s of
            '': fetch ();
            '{':
                m = [:];
                empty? tokens or head tokens != '}' loop
                   (key = fetch ();
                    if not key instanceof String then 
                        failWith "Invalid JSON field name (\(key))"
                    fi;
                    case tokens of
                    ':' :: r: tokens := r;
                    _: failWith "JSON expecting : after object field name";
                    esac;
                    m[key] := fetch ();
                    case head tokens of
                    ',': tokens := tail tokens;
                    '}': ();
                    x: invalid x;
                    esac);
                tokens := tail tokens;
                new JSONObj(m unsafely_as ~Hash);
            '[':
                a = array [];
                empty? tokens or head tokens != ']' loop
                    (push a (fetch ());
                     case head tokens of
                     ',': tokens := tail tokens;
                     ']': ();
                     x: invalid x;
                     esac);
                tokens := tail tokens;
                a as ~Object;
            'true' : true as ~Object;
            'false': false as ~Object;
            'null' : ();
            _:  if strStarts? s '"' then
                    escape m =
                        case m[1] of
                        'n': "\n";
                        't': "\t";
                        'r': "\r";
                        'b': "\b";
                        'f': "\f";
                        s : if strLength s <= 1 then
                                s
                            else
                                x = new int[1];
                                x[0] := Integer#parseInt(strRight s 1, 16);
                                new String(x, 0, 1) unsafely_as string
                            fi
                        esac;
                    (matchAll '\\(["\\/bfnrt]|u[0-9a-fA-F]{4})' escape id
                        (strSlice s 1 (strLength s - 1)) |> strJoin '')
                        as ~Object
                else
                    number s as ~Object
                fi
            esac;
        _: failWith "Unexpected end of JSON data"
        esac;
    res = fetch ();
    tokens := filter defined? tokens;
    if not empty? tokens then
        failWith "Garbage after JSON data (\(head tokens))"
    fi;
    res);

{
    jsStr, jsNum, jsTrue?, jsList, jsGet, jsKeys, jsValue,
    jsOfList, jsOfObj, jsonParse,
    jsNull?  = nullptr?,
    jsOfStr  = jsOf,
    jsOfNum  = jsOf,
    jsOfBool = jsOf,
    jsNull = () as json
} as {
    jsStr    is (json -> string) -> json -> string,
    jsNum    is (json -> number) -> json -> number,
    jsTrue?  is json -> boolean,

    /**
     * Returns true if the value is JSON null.
     *
     * Arguments:
     * value - JSON value
     */
    jsNull?  is json -> boolean,

    jsList   is json -> list<json>,
    jsGet    is string -> json -> json,
    jsKeys   is json -> list<string>,
    jsValue  is json -> json_variant,

    /**
     * Create a JSON value from string.
     *
     * Arguments:
     * string - a string to use
     */
    jsOfStr  is string -> json,

    /**
     * Create a JSON value from number.
     *
     * Arguments:
     * number - a number to use
     */
    jsOfNum  is number -> json,

    /**
     * Create a JSON value from boolean.
     *
     * Arguments:
     * boolean - a boolean to use
     */
    jsOfBool is boolean -> json,

    /**
     * Create a JSON object from fields in a hash table representation.
     *
     * Arguments:
     * fields - Fields for the JSON object
     */
    jsOfObj  is hash<string, json> -> json,

    /**
     * Create a JSON value from list.
     *
     * Arguments:
     * list - list of JSON values
     */
    jsOfList is list?<json> -> json,

    /// JSON null value.
    jsNull   is json,

    jsonParse is string -> json
}

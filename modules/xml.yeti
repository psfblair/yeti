/*
 * Simple DOM like XML library for Yeti.
 *
 * Copyright (c) 2012 Madis Janson
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/**
 * Simple DOM like XML API for Yeti.
 *
 * This module uses internally Streaming API for XML (StAX) for parsing
 * and generating XML. If you have JDK 1.6 or later, then StAX implementation
 * comes with the JRE. Otherwise you need to include StAX implementation in
 * the classpath.
 */
module yeti.xml;

import javax.xml.stream: XMLInputFactory, XMLOutputFactory, XMLStreamReader,
                         XMLStreamWriter, XMLStreamConstants;

typedef xml_value =
    /// Character data section.
    PCData string |
    /// CData section.
    CData string |
    /// XML comment string.
    Comment string |
    /// Document Type Definition.
    /// May exists only in root elements tailValues list.
    DTD string

typedef xmlns_declaration = {
    /// Namespace prefix for XML elements and attributes.
    prefix is string,

    /// Namespace URI.
    uri is string
}

/// XML element structure returned by xmlElement and xmlParse.
typedef xml_element = {
    /// XML element local name.
    name is string,

    /**
     * XML element attributes in hash map.
     * The map keys may be either attribute local names (if no prefix is
     * intended) or in the form "{namespace-URI}local-name".
     *
     * The xmlParse function inserts the {namespace-URI} prefix only when
     * the KeepNS () option was given and the attribute had a prefix.
     *
     * The xmlWrite function requires that xmlns prefixes are defined for
     * used namespace URIs.
     */
    attributes is hash<string, string>,

    /// Nested XML child elements.
    elements is array<xml_element>,

    /**
     * Text contained in this XML element. When read, this property is
     * a result of concatenating all PCData and CData sections from this
     * elements values and nested elements tailValues fields.
     *
     * When written, the values field will be assigned [PCData value],
     * and all nested elements tailValues will be assigned empty list []
     * (removing all non-element sections from this XML element).
     *
     * This property is only for convenience (the xmlWrite function ignores it).
     */
    var text is string,

    /// List of non-element XML sections directly after this elements starting
    /// tag (and before any nested element), including XML comments.
    var values is list<xml_value>,

    /**
     * List of non-element XML sections directly after this elements closing
     * tag (including XML comments).
     *
     * Root element can also have the DTD (document type definition) and
     * preceding comments here.
     */
    var tailValues is list<xml_value>,

    /**
     * Namespace URI for the XML elements name.
     * Value undef_str is used, when namespace prefix is not present.
     */
    var uri is string,
    
    /// List of xmlns namespaces declared with this element
    /// (these use the xmlns:prefix="uri" form in the actual XML).
    var xmlns is list<xmlns_declaration>
}

xmlElement' name uri attr 
        is string -> string -> hash<string, string> -> xml_element =
   (if name == '' then
        failWith "Element must have a name"
    fi;
    {
        name,
        attributes = attr,
        elements = array [],
        var values = [],
        var tailValues = [],
        get text () =
            // speed hack
            var res = () as ~java.lang.StringBuilder;
            var str = '';
            for (values :: map (.tailValues) elements) do vl:
                for vl do v:
                    if str == '' then
                    elif nullptr? res then
                        res := new java.lang.StringBuilder(str)
                    else
                        _ = res#append(str unsafely_as ~String)
                    fi;
                    str := case v of
                           PCData s: s; 
                           CData  s: s;
                           _: "";
                           esac;
                done
            done;
            if nullptr? res then str else "\(res#append(str))" fi,
        set text str =
            for elements do element:
                element.tailValues := []
            done;
            values := [PCData str],
        var uri = uri,
        var xmlns = []
    });

/**
 * Creates a new empty XML element structure.
 *
 * Arguments:
 * name - local name for the XML element
 */
xmlElement name is string -> xml_element =
    xmlElement' name undef_str [:];

add_value e v =
   (l = e.elements is array<'a>;
    if empty? l then
        e.values := v :: e.values
    else
        e = l[length l - 1];
        e.tailValues := v :: e.tailValues
    fi);

/**
 * Parses XML from specified source into xml_element structure.
 * The options list must contain one of the following source
 * options: InputStream, Reader, Source, Str or File.
 *
 * Arguments:
 * options - XML source and parsing options
 */
xmlParse source is 'a -> xml_element =
   (
    var keepWS = false;
    var keepNS = false;
    var nsAware = true;
    src = array [];
    f = XMLInputFactory#newInstance();
    for source do opt:
        case opt of
        /// Read XML from this InputStream instance (expects UTF-8 encoding).
        InputStream _:
            push src opt;

        /// Read XML from this Reader instance.
        Reader _:
            push src opt;

        /// Read XML from  this Source instance.
        Source _:
            push src opt;

        /// Parse this string as XML.
        Str _:
            push src opt;

        /// Read XML from a file with this name.
        File _:
            push src opt;

        /// Turns on/off namespace processing for XML 1.0 support.
        /// Default is true (for conforming XML Streaming API implementations).
        NSAware flag:
            nsAware := flag;
            f#setProperty(XMLInputFactory#IS_NAMESPACE_AWARE, flag is boolean);

        /// Turns on implementation specific DTD validation.
        Validate ():
            f#setProperty(XMLInputFactory#IS_VALIDATING, true);

        /// Whether to require the processor to coalesce adjacent character
        /// data. Coalescing can eat CDATA living between PCDATA.
        /// Default is false (for conforming XML Streaming API implementations).
        Coalescing flag:
            f#setProperty(XMLInputFactory#IS_COALESCING, flag is boolean);

        /// Element attribute names (in .attributes hash) will be in the form
        /// '{namespace-URI}attribute-name' for attributes that had
        /// a namespace prefix in XML.
        /// When combined with `NSAware false` option, the prefix part in
        /// attribute names will be preserved.
        KeepNS ():
            keepNS := true;

        /// Keep ignorable whitespace (as defined in the
        /// XML 1.1 recommendation).
        KeepWS ():
            keepWS := true;

        /// Turns on both KeepNS (preserving attribute namespaces) and
        /// KeepWS (preserving ignorable whitespace).
        KeepAll ():
            keepNS := true;
            keepWS := true;
        esac
    done;
    if empty? src then
        failWith "No input source given to xmlParse"
    fi;
    if length src != 1 then
        failWith "Multiple input sources are not allowed for xmlParse"
    fi;
    r = case src[0] of
        InputStream s:
            f#createXMLStreamReader(s is ~java.io.InputStream, 'UTF-8');
        Reader ir:
            f#createXMLStreamReader(ir is ~java.io.Reader);
        Source s:
            f#createXMLStreamReader(s is ~javax.xml.transform.Source);
        Str s:
            f#createXMLStreamReader(new java.io.StringReader(s));
        File fn:
            f#createXMLStreamReader(new java.io.FileInputStream(
                    fn is string unsafely_as ~String), 'UTF-8');
        ...
        esac;
    root = xmlElement 'UTF-8';
    var current = root;
    stack = array [];
    r#hasNext() loop
       (cur = current;
        case r#next() of
        XMLStreamConstants#START_ELEMENT:
            var i = r#getAttributeCount();
            attr = new yeti.lang.Hash(i) unsafely_as hash<string, string>;
            (i := i - 1; i >= 0) loop
               (qn = r#getAttributeName(i);
                attr[if nsAware then
                        if keepNS and qn#getNamespaceURI() != '' then
                            "{\(qn#getNamespaceURI())}\(qn#getLocalPart())"
                        else
                            qn#getLocalPart()
                        fi
                     elif keepNS and qn#getPrefix() != '' then
                        "\(qn#getPrefix()):\(qn#getLocalPart())"
                     else
                        qn#getLocalPart()
                     fi] := r#getAttributeValue(i));
            push stack cur;
            current := xmlElement' r#getLocalName() r#getNamespaceURI() attr;
            push cur.elements current;
            i := r#getNamespaceCount();
            (i := i - 1; i >= 0) loop
                current.xmlns := {
                    prefix = r#getNamespacePrefix(i),
                    uri = r#getNamespaceURI(i)
                } :: current.xmlns;
        XMLStreamConstants#END_ELEMENT:
            cur.values := reverse cur.values;
            for cur.elements do e:
                e.tailValues := reverse e.tailValues
            done;
            current := pop stack;
        XMLStreamConstants#CDATA:
            add_value cur (CData r#getText());
        XMLStreamConstants#COMMENT:
            add_value cur (Comment r#getText());
        XMLStreamConstants#DTD:
            add_value cur (DTD r#getText());
        _:
            if r#hasText() and (not r#isWhiteSpace() or keepWS) then
                add_value cur (PCData r#getText())
            fi
        esac);
    r#close();
    if empty? root.elements then
        failWith "No document element"
    fi;
    current := root.elements[0];
    current.tailValues := root.values;
    current);

write_values w values is ~XMLStreamWriter -> list<xml_value> -> () =
    for values
       \case of
        PCData  str: w#writeCharacters(str);
        CData   str: w#writeCData(str);
        Comment str: w#writeComment(str);
        _: ();
        esac;

write_attr w e is ~XMLStreamWriter -> xml_element -> () =
   (for e.xmlns do ns:
        w#writeNamespace(ns.prefix, ns.uri)
    done;
    var i = (e.attributes is hash<string, string>
        unsafely_as ~java.util.Map)#entrySet()#iterator();
    i#hasNext() loop
       (e = i#next() unsafely_as ~java.util.Map$Entry;
        name = "\(e#getKey())";
        value = "\(e#getValue())";
        if name `strStarts?` '{' then
            local = strRightOf '}' name;
            uri = strSlice name 1 (strLength name - strLength local - 1);
            w#writeAttribute('xml', uri, local, value)
        else
            w#writeAttribute(name, value)
        fi));

/**
 * Generates textual representation of the XML document and writes
 * it to the specified destination.
 * The options list must contain one of the following
 * destination options: OutputStream, Writer, File, Result or Out.
 *
 * Arguments:
 * options - destination and formatting options
 * document - XML root element representing a document
 *
 * Examples:
 * Print XML to standard output:
 * : xmlWrite [Out println, Indent '  '] document;
 */
xmlWrite to root =
   (f = XMLOutputFactory#newInstance();
    var indent = undef_str;
    var w_was = () as ~XMLStreamWriter;
    var w = () as ~XMLStreamWriter;
    var buf = () as ~java.io.StringWriter;
    var cb = \();
    for to
       \case of
        /// Write XML to this OutputStream instance in UTF-8 encoding.
        OutputStream os:
            w_was := w;
            w := f#createXMLStreamWriter(os is ~java.io.OutputStream, 'UTF-8');

        /// Write XML to this Writer instance.
        Writer ow:
            w_was := w;
            w := f#createXMLStreamWriter(ow is ~java.io.Writer);
        
        /// Write UTF-8 encoded XML to file with this name.
        File fn:
            w_was := w;
            w := f#createXMLStreamWriter(new java.io.FileOutputStream(
                    fn is string unsafely_as ~String), 'UTF-8');

        /// Write XML to this Result instance.
        Result res:
            w_was := w;
            w := f#createXMLStreamWriter(res is ~javax.xml.transform.Result);

        /// Apply this function to genereted XML (string).
        Out callback:
            cb := callback;
            buf := new java.io.StringWriter();
            w_was := w;
            w := f#createXMLStreamWriter(buf);

        /// Format generated XML by inserting "\n" before each start element,
        /// and indenting the lines with this string (repeated by element
        /// nesting depth).
        Indent indent_str:
            indent := indent_str;
        esac;
    if nullptr? w then
        failWith "No output destination given to xmlWrite"
    fi;
    if not nullptr? w_was then
        failWith "Multiple output destinations are not allowed for xmlWrite"
    fi;
    w = w;
    indent = indent;
    w#writeStartDocument();
    for root.tailValues
       \case of
        DTD dtd:
            if dtd != '' then
                w#writeDTD(dtd)
            fi;
        Comment str:
            w#writeComment(str);
        _: ()
        esac;
    w#setPrefix("xml", "http://www.w3.org/XML/1998/namespace");
    iter cur_indent element =
       (new_indent =
            if defined? indent then
                w#writeCharacters(cur_indent);
                cur_indent ^ indent
            else
                ""
            fi;
        for element.xmlns do ns:
            if defined? ns.prefix then
                w#setPrefix(ns.prefix, ns.uri)
            else
                w#setDefaultNamespace(ns.uri)
            fi
        done;
        uri = element.uri;
        if empty? element.elements and empty? element.values then
            if defined? uri then
                w#writeEmptyElement(uri,
                    element.name is string unsafely_as ~String)
            else
                w#writeEmptyElement(element.name unsafely_as ~String)
            fi;
            write_attr w element
        else
            if defined? uri then
                w#writeStartElement(uri, element.name unsafely_as ~String)
            else
                w#writeStartElement(element.name unsafely_as ~String)
            fi;
            write_attr w element;
            write_values w element.values;
            elements = element.elements;
            for elements (iter new_indent);
            if defined? indent and not empty? elements then
                w#writeCharacters(cur_indent)
            fi;
            w#writeEndElement();
        fi;
        if not same? element root then
            write_values w element.tailValues
        fi);
    iter "\n" root;
    w#writeEndDocument();
    w#flush();
    if not nullptr? buf then
        cb "\(buf)"
    fi);

/**
 * Finds all child elements by the given path.
 *
 * Arguments:
 * path    - list of element names forming the path
 * element - element where to start
 *
 * Description:
 * First finds all child elements with the name matching the first
 * path element. Then their child elements matching the next path
 * element, and so on repeating for each path element, and finallyi
 * returns the child elements matching the last path element.
 *
 * Examples:
 * : load yeti.xml;
 * : xml = xmlParse [Str """
 * :    <foo>
 * :        <nothing>???</nothing>
 * :        <something>
 * :           <bar>33</bar>
 * :           <baz>whatever</baz>
 * :           <bar>42</bar>
 * :        </something>
 * :    </foo>"""];
 * A XML tree is obtained by parsing the above XML. The root element
 * (in xml) is the <foo> element. The bar elements can be found using
 * the following query:
 * : bars = xmlByPath ["something", "bar"] xml;
 * The contents of bars could be obtained by mapping (.text) field:
 * : bar_values = map (.text) bars;
 * : for bar_values println;
 * The for loop prints in this case the values 33 and 42.
 * : 33
 * : 42
 */
xmlByPath path element =
   (var elem = [element];
    for (path is list<string>) do name:
        result = array [];
        for elem do ee:
            for ee.elements do e:
                if e.name == name then
                    push result e
                fi
            done
        done;
        elem := list result
    done;
    elem);

{ xmlElement, xmlParse, xmlWrite, xmlByPath }

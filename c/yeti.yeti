/**
 * Yeti compiler main program.
 * Copyright (c) 2008-2013 Madis Janson
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 * 3. The name of the author may not be used to endorse or promote products
 *    derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE AUTHOR "AS IS" AND ANY EXPRESS OR
 * IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
 * OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
 * IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT,
 * INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT
 * NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
 * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
 * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
 * THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */
program yeti.lang.compiler.yeti;

import java.io.File;
load yeti.lang.compiler.eval;
load yeti.lang.compiler.showtype;

var eval = undef_str;
var exec = true;
var compileErrorTrace = false;
var modules = array [];
var printType = false;
var sandbox = false;
var out = System#err;
var doc_dir = undef_str;
var doc_script = '';
var nojava = false;

srcs = array [];
argv = array _argv;

options = array [];
evalOptions = array [Exec argv];
compileOptions = array [];

printMessage ex is ~CompileException -> () =
    println ex#getMessage();

repl eval =
   (print "> ";
    line = readln ();
    if defined? line then
        print (eval line).str;
        repl eval
    else
        println ""
    fi);

help =
    "yeti -flags... files/directories\n\n\
    "  -h               Print this help\n\
    "  -e expr          Evaluate expr and print result\n\
    "  -d directory     Compile and store the generated class files\n\
    "                   in the given directory\n\
    "  -cp path         Give classpath\n\
    "  -nojava          Don't search java files from source directories\n\
    "  -preload modules Preload modules (: separated list)\n\
    "  -icast           Generate superfluous casts for broken JVMs\n\
    "  -javaver version Forces specified Java version when compiling Java\n\
    "  -j option        Option for Javac (used when compiling Java sources)\n\
    "  -doc directory   Generate module documentation into given directory\n\
    "  -type            Print type signature of given expression or module\n";

splitPath = strSplit File#pathSeparator;

not (defined? eval or empty? argv) and (not exec or empty? srcs) loop
   (arg = shift argv;
    if arg `strStarts?` '-' then
        case arg of
        "-C":
            push options (To '');
            exec := false;
        "-d":
            target = shift argv;
            push options (To target);
            exec := false;
        "-e":
            eval := shift argv;
        "-cp":
            shift argv |> splitPath |> ClassPath |> push options;
        "-preload":
            shift argv |> splitPath |> Preload |> push options;
        "-type":
            printType := true;
            exec := false;
            push compileOptions (Type (push modules));
        "-doc":
            doc_dir := shift argv;
            exec := false;
            push compileOptions (Type (push modules));
        "-doc-format":
            doc_script := shift argv;
        "-nojava":
            nojava := true;
        "-javaver":
            ver = shift argv;
            for ['-source', ver, '-target', ver]
                (push compileOptions . JavaOption);
        "-j":
            push compileOptions (JavaOption (shift argv));
        "-guard":
            time = number (shift argv);
            _ = runThread [Daemon ()] do:
                sleep time;
                println "(terminated)";
                System#exit(13)
            done;
        "-safe-eval":
            push evalOptions (GlobalSandbox ());
            sandbox := true;
            eval := shift argv;
            out := System#out;
        "-compile-error-trace":
            compileErrorTrace := true;
        "-icast":
            push options (ICast ());
        "-parse-tree":
            push options (ParseTree ());
        "-no-import":
            push options (NoImport ());
        "-no-frames":
            push options (NoFrames ());
        "-v":
            println "Yeti \(yetiRuntimeVersion)";
            threadExit 0;
        _:
            case arg of
            "-h": ();
            "-help": ();
            "--help": ();
            _:
                println "Unexpected option: \(arg)";
                threadExit 1;
            esac;
            println help;
            threadExit 0
        esac
    else
        push srcs arg
    fi);

scan src local dirs to =
   (var ok = true;
    if src `strEnds?` '.yeti' then
        to[src] := src
    elif src `strEnds?` '.java' then
        if nojava then
            ok := false
        else
            to[src] := src
        fi
    else
        dirList = listDirectory false src;
        if empty? dirList then
            ok := new File(src)#isDirectory()
        else
            dirs (SourceDir src)
        fi;
        for dirList do {name, path}:
            fn = if local == '' then name else "\(local)/\(name)" fi;
            _ = scan path fn \() to
        done
    fi;
    ok);

printException ex is ~java.lang.Throwable -> () =
   (if sandbox and ex instanceof java.lang.StackOverflowError then
        out#println("Stack overflow")
    elif ex instanceof java.lang.OutOfMemoryError then
        out#println("Out of memory")
    else
        ex#printStackTrace(out)
    fi;
    sysExit 2);

push options (Warn printMessage);

if defined? eval then
    if printType then
        push evalOptions (NoExec ());
    fi;
    {type, result} = evaluateYetiCode options evalOptions eval;
    case result of
    Exception ex:
        printException ex;
    CompileException ex:
        printMessage ex;
        threadExit 1;
    Result val: 
        if printType then
            println (showType [] '' type)
        elif exec and type != Simple "()" then
            println val
        fi
    esac
elif empty? srcs then
    if exec and empty? argv then
        _ = pop options; // no Warn
        println "Yeti \(yetiRuntimeVersion) REPL.\n";
        push evalOptions (Bind ());
        repl (evaluateYetiCode options evalOptions)
    fi
else
    if exec then
        push compileOptions (Exec argv)
    fi;
    files = [:];
    for (list srcs) do src:
        if not scan src '' (push compileOptions) files then
            println "Don't know what to do with `\(src)'";
            threadExit 1
        fi
    done;
    try
        compileYetiFiles options compileOptions (list files);
    catch CompileException ex:
        if compileErrorTrace then
            ex#printStackTrace()
        fi;
        printMessage ex;
        threadExit 1
    catch java.lang.reflect.InvocationTargetException ex:
        printException ex#getCause()
    catch java.lang.Throwable ex:
        printException ex
    yrt;
    if not empty? modules then
        if defined? doc_dir then
            generateYetiDoc {directory = doc_dir, modules, error = println}
        else
            for (list modules) do m:
                if m.doc != "" then
                    println "/*\n\(m.doc)\n*/"
                fi;
                println "module \(m.name);\n";
                for m.typedefs do {name, type, param}:
                    p = if not empty? param then "<\(strJoin ', ' param)>" fi;
                    println "typedef \(name)\(p) = \
                            "\(showType [CommentDoc ()] '' type)\n"
                done;
                println (showType [CommentDoc ()] '' m.type);
            done
        fi
    fi
fi
